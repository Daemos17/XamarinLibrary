// <auto-generated />
using System;
using LibraryWebService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryWebService.Migrations
{
    [DbContext(typeof(libraryContext))]
    [Migration("20220224073024_IntialCreate")]
    partial class IntialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryWebService.Models.Author", b =>
                {
                    b.Property<int>("IdAuthor")
                        .HasColumnType("int")
                        .HasColumnName("Id_author");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdAuthor");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibraryWebService.Models.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .HasColumnType("int")
                        .HasColumnName("Id_book");

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAuthorFk")
                        .HasColumnType("int")
                        .HasColumnName("Id_authorFk");

                    b.Property<int?>("IdGenreFk")
                        .HasColumnType("int")
                        .HasColumnName("id_genreFk");

                    b.Property<int?>("IdTypeFk")
                        .HasColumnType("int")
                        .HasColumnName("id_typeFk");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("imagePath");

                    b.Property<string>("Year")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("year");

                    b.HasKey("IdBook");

                    b.HasIndex("IdAuthorFk");

                    b.HasIndex("IdGenreFk");

                    b.HasIndex("IdTypeFk");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryWebService.Models.Comment", b =>
                {
                    b.Property<int>("IdComment")
                        .HasColumnType("int")
                        .HasColumnName("id_comment");

                    b.Property<string>("Commnet")
                        .HasColumnType("text");

                    b.Property<int?>("IdBookCom")
                        .HasColumnType("int")
                        .HasColumnName("id_bookCom");

                    b.Property<int?>("IdStudentCom")
                        .HasColumnType("int")
                        .HasColumnName("id_studentCom");

                    b.HasKey("IdComment");

                    b.HasIndex("IdBookCom");

                    b.HasIndex("IdStudentCom");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LibraryWebService.Models.Genre", b =>
                {
                    b.Property<int>("IdGenre")
                        .HasColumnType("int")
                        .HasColumnName("id_genre");

                    b.Property<string>("GenreName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("genreName");

                    b.HasKey("IdGenre");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LibraryWebService.Models.Group", b =>
                {
                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("Id_group");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("groupName");

                    b.HasKey("IdGroup");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("LibraryWebService.Models.LibrariesBook", b =>
                {
                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("IdBookLbFk")
                        .HasColumnType("int")
                        .HasColumnName("id_bookLbFk");

                    b.Property<int?>("IdLibraryFk")
                        .HasColumnType("int")
                        .HasColumnName("id_libraryFk");

                    b.HasIndex("IdBookLbFk");

                    b.HasIndex("IdLibraryFk");

                    b.ToTable("Libraries-Books");
                });

            modelBuilder.Entity("LibraryWebService.Models.Library", b =>
                {
                    b.Property<int>("IdLibrary")
                        .HasColumnType("int")
                        .HasColumnName("Id_library");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LibraryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdLibrary");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("LibraryWebService.Models.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .HasColumnType("int")
                        .HasColumnName("Id_person");

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPerson");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("LibraryWebService.Models.Student", b =>
                {
                    b.Property<int>("IdStudent")
                        .HasColumnType("int")
                        .HasColumnName("Id_student");

                    b.Property<int>("IdGroupFk")
                        .HasColumnType("int")
                        .HasColumnName("id_group(fk)");

                    b.Property<int>("IdPersStudFk")
                        .HasColumnType("int")
                        .HasColumnName("Id_pers_Stud(Fk)");

                    b.Property<string>("Year")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("year")
                        .IsFixedLength(true);

                    b.HasKey("IdStudent");

                    b.HasIndex("IdGroupFk");

                    b.HasIndex("IdPersStudFk");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LibraryWebService.Models.StudentsBook", b =>
                {
                    b.Property<DateTime?>("DateofPicking")
                        .HasColumnType("date")
                        .HasColumnName("dateofPicking");

                    b.Property<DateTime?>("DateofRetruning")
                        .HasColumnType("date")
                        .HasColumnName("dateofRetruning");

                    b.Property<int>("IdBookS")
                        .HasColumnType("int")
                        .HasColumnName("id_bookS");

                    b.Property<int>("IdStudentS")
                        .HasColumnType("int")
                        .HasColumnName("id_studentS");

                    b.HasIndex("IdBookS");

                    b.HasIndex("IdStudentS");

                    b.ToTable("Students-Books");
                });

            modelBuilder.Entity("LibraryWebService.Models.Type", b =>
                {
                    b.Property<int>("IdType")
                        .HasColumnType("int")
                        .HasColumnName("Id_type");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdType");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("LibraryWebService.Models.Worker", b =>
                {
                    b.Property<int>("IdWorker")
                        .HasColumnType("int")
                        .HasColumnName("Id_worker");

                    b.Property<int>("IdPersWorkFk")
                        .HasColumnType("int")
                        .HasColumnName("Id_pers_Work(fk)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdWorker");

                    b.HasIndex("IdPersWorkFk");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("LibraryWebService.Models.Book", b =>
                {
                    b.HasOne("LibraryWebService.Models.Author", "IdAuthorFkNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdAuthorFk")
                        .HasConstraintName("FK_Books_Authors")
                        .IsRequired();

                    b.HasOne("LibraryWebService.Models.Genre", "IdGenreFkNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdGenreFk")
                        .HasConstraintName("FK_Books_Genres");

                    b.HasOne("LibraryWebService.Models.Type", "IdTypeFkNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdTypeFk")
                        .HasConstraintName("FK_Books_Types");

                    b.Navigation("IdAuthorFkNavigation");

                    b.Navigation("IdGenreFkNavigation");

                    b.Navigation("IdTypeFkNavigation");
                });

            modelBuilder.Entity("LibraryWebService.Models.Comment", b =>
                {
                    b.HasOne("LibraryWebService.Models.Book", "IdBookComNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdBookCom")
                        .HasConstraintName("FK_Comments_Books");

                    b.HasOne("LibraryWebService.Models.Student", "IdStudentComNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdStudentCom")
                        .HasConstraintName("FK_Comments_Comments");

                    b.Navigation("IdBookComNavigation");

                    b.Navigation("IdStudentComNavigation");
                });

            modelBuilder.Entity("LibraryWebService.Models.LibrariesBook", b =>
                {
                    b.HasOne("LibraryWebService.Models.Book", "IdBookLbFkNavigation")
                        .WithMany()
                        .HasForeignKey("IdBookLbFk")
                        .HasConstraintName("FK_Libraries-Books_Books");

                    b.HasOne("LibraryWebService.Models.Library", "IdLibraryFkNavigation")
                        .WithMany()
                        .HasForeignKey("IdLibraryFk")
                        .HasConstraintName("FK_Libraries-Books_Libraries");

                    b.Navigation("IdBookLbFkNavigation");

                    b.Navigation("IdLibraryFkNavigation");
                });

            modelBuilder.Entity("LibraryWebService.Models.Student", b =>
                {
                    b.HasOne("LibraryWebService.Models.Group", "IdGroupFkNavigation")
                        .WithMany("Students")
                        .HasForeignKey("IdGroupFk")
                        .HasConstraintName("FK_Students_Groups")
                        .IsRequired();

                    b.HasOne("LibraryWebService.Models.Person", "IdPersStudFkNavigation")
                        .WithMany("Students")
                        .HasForeignKey("IdPersStudFk")
                        .HasConstraintName("FK_Students_Persons")
                        .IsRequired();

                    b.Navigation("IdGroupFkNavigation");

                    b.Navigation("IdPersStudFkNavigation");
                });

            modelBuilder.Entity("LibraryWebService.Models.StudentsBook", b =>
                {
                    b.HasOne("LibraryWebService.Models.Book", "IdBookSNavigation")
                        .WithMany()
                        .HasForeignKey("IdBookS")
                        .HasConstraintName("FK_Students-Books_Books")
                        .IsRequired();

                    b.HasOne("LibraryWebService.Models.Student", "IdStudentSNavigation")
                        .WithMany()
                        .HasForeignKey("IdStudentS")
                        .HasConstraintName("FK_Students-Books_Students")
                        .IsRequired();

                    b.Navigation("IdBookSNavigation");

                    b.Navigation("IdStudentSNavigation");
                });

            modelBuilder.Entity("LibraryWebService.Models.Worker", b =>
                {
                    b.HasOne("LibraryWebService.Models.Person", "IdPersWorkFkNavigation")
                        .WithMany("Workers")
                        .HasForeignKey("IdPersWorkFk")
                        .HasConstraintName("FK_Workers_Persons")
                        .IsRequired();

                    b.Navigation("IdPersWorkFkNavigation");
                });

            modelBuilder.Entity("LibraryWebService.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebService.Models.Book", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryWebService.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebService.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("LibraryWebService.Models.Person", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("LibraryWebService.Models.Student", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryWebService.Models.Type", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
